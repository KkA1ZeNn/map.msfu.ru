/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_interactivemap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/interactivemap.js */ \"./src/js/modules/interactivemap.js\");\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n   const map = new _modules_interactivemap_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n   map.render();\r\n});\n\n//# sourceURL=webpack://gulp-builder-for-the-webproject/./src/js/main.js?");

/***/ }),

/***/ "./src/js/modules/interactivemap.js":
/*!******************************************!*\
  !*** ./src/js/modules/interactivemap.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ InteractiveMap; }\n/* harmony export */ });\nclass InteractiveMap {\r\n   constructor() {\r\n      this.mapData;\r\n      this.svg;\r\n      this.instance;\r\n      this.categoriesAndRoomsList;\r\n      this.choosenCategory;\r\n      this.currentFloor;\r\n      this.searchParams = ['id', 'title', 'about'];\r\n      this.baseUrl = window.location.href.split('?')[0];\r\n\r\n      this.interactiveBlock = document.createElement('div');\r\n         this.mapContainer = document.createElement('div');\r\n            this.svgContainer = document.createElement('div');\r\n         this.descriptionBlock = document.createElement('div');\r\n         this.floorSwitchingBar = document.createElement('div');\r\n            this.currentFloorNumber = document.createElement('div');\r\n            this.floorReduceBtn = document.createElement('button');\r\n            this.floorIncreaseBtn = document.createElement('button');\r\n\r\n      this.searchingBlock = document.createElement('div');\r\n         this.searchInput = document.createElement('input');\r\n         this.categoriesBlock = document.createElement('div');\r\n            this.choosenCategoryBlock = document.createElement('div'),\r\n            this.choosenCategoryTextBlock = document.createElement('div'),\r\n            this.closeChoosenCategoryButton = document.createElement('button');\r\n         this.searchResultBlock = document.createElement('div');\r\n\r\n\r\n      // Обработчик событий SVG файла для реагирования комнат на нажатие\r\n      this.svgContainer.addEventListener('click', (event) => {\r\n         const roomElement = event.target.closest('[id^=\"room\"]');\r\n         if (roomElement) {\r\n            this.selectRoom(roomElement.getAttribute('id'));\r\n         } else {\r\n            this.resetUrl();\r\n\r\n            const activeRoom = document.querySelector('[id^=\"room\"].active');\r\n            if (activeRoom) {\r\n               this.removeSelectRoom(activeRoom);\r\n            }\r\n         }\r\n      });\r\n\r\n      // Обработчик событий для тех комнат, которые появились в списке поиска\r\n      this.searchResultBlock.addEventListener('click', (event) => this.searchResultsClickHandler(event));\r\n\r\n      // Обработчики событий для смены этажа\r\n      this.floorIncreaseBtn.addEventListener('click', async () => { \r\n         await this.setFloor(this.currentFloor + 1);\r\n         const roomFromUrl = document.querySelector( '#' + this.checkURL() );\r\n         if(roomFromUrl) {\r\n            this.selectRoom(roomFromUrl.getAttribute('id'));\r\n         }\r\n      });\r\n      this.floorReduceBtn.addEventListener('click', async () => { \r\n         await this.setFloor(this.currentFloor - 1);\r\n         const roomFromUrl = document.querySelector( '#' + this.checkURL() );\r\n         if(roomFromUrl) {\r\n            this.selectRoom(roomFromUrl.getAttribute('id'));\r\n         }\r\n      });\r\n\r\n      // обработчик событий для поиска комнат по описанию\r\n      this.searchInput.addEventListener('input', this.debounce(() => { this.formSearchResultList(this.searchParams) }, 700));\r\n\r\n      this.closeChoosenCategoryButton.addEventListener('click', () => {\r\n         this.choosenCategory = \"\";\r\n         this.hide(this.choosenCategoryBlock);\r\n         this.formSearchResultList(this.searchParams);\r\n      });\r\n   }\r\n\r\n   render() {\r\n      this.injectStyle();\r\n      this.fetchingJSON();\r\n\r\n      this.interactiveBlock.append(this.mapContainer, this.floorSwitchingBar, this.descriptionBlock);\r\n      this.mapContainer.append(this.svgContainer);\r\n      this.floorSwitchingBar.append(this.currentFloorNumber, this.floorReduceBtn, this.floorIncreaseBtn);\r\n\r\n      this.searchingBlock.append(this.searchInput, this.categoriesBlock, this.searchResultBlock);\r\n      this.categoriesBlock.append(this.choosenCategoryBlock);\r\n      this.choosenCategoryBlock.append(this.choosenCategoryTextBlock, this.closeChoosenCategoryButton);\r\n\r\n      this.interactiveBlock.classList.add('interactiveBlock');\r\n      this.mapContainer.classList.add('mapContainer');\r\n      this.svgContainer.classList.add('svgConteiner');\r\n      this.descriptionBlock.classList.add('descriptionBlock');\r\n      this.floorSwitchingBar.classList.add('floorSwitchingBar');\r\n      this.currentFloorNumber.classList.add('currentFloorNumber');\r\n      this.floorReduceBtn.classList.add('floorReduceBtn');\r\n      this.floorIncreaseBtn.classList.add('floorIncreaseBtn');\r\n\r\n      this.searchingBlock.classList.add('searchingBlock');\r\n      this.searchInput.classList.add('searchInput');\r\n      this.categoriesBlock.classList.add('categoriesBlock');\r\n      this.choosenCategoryBlock.classList.add('choosenCategoryBlock','hidden');\r\n      this.choosenCategoryTextBlock.classList.add('choosenCategoryTextBlock');\r\n      this.closeChoosenCategoryButton.classList.add('closeChoosenCategoryButton');\r\n      this.searchResultBlock.classList.add('searchResultBlock');\r\n\r\n      this.floorReduceBtn.innerHTML = `-`;\r\n      this.floorIncreaseBtn.innerHTML = `+`;\r\n      this.closeChoosenCategoryButton.innerHTML = `X`;\r\n      this.searchInput.setAttribute('type', 'text');\r\n      this.searchInput.setAttribute('placeholder', 'Enter class number or name of the department');\r\n\r\n      document.querySelector(\"body\").append(this.interactiveBlock, this.searchingBlock);\r\n   }\r\n\r\n   fetchingJSON() {\r\n      fetch('../data/bmstuJson.json')\r\n      .then((response) => {\r\n         if (response.ok) {\r\n            return response;\r\n         } else {\r\n            let error = new Error(response.statusText);\r\n            error.response = response;\r\n            throw error\r\n         }\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n         this.mapData = json;\r\n         //Формируем масси из комнат и категорий, можно вынести в отдельную функцию\r\n         this.categoriesAndRoomsList = this.mapData.categories.map(categories => ({category: categories})).concat(\r\n            this.mapData.floors.flatMap(floor => floor.locations.map(locations => ({\r\n               floor: floor.id,\r\n               room: locations\r\n         }))));\r\n\r\n         const roomIdFromUrl = this.checkURL();\r\n         if (roomIdFromUrl) {\r\n            this.selectRoom(roomIdFromUrl);\r\n         } else {\r\n            this.mapData.floors.forEach((floor, i) => {\r\n               if (floor.status === 'main floor') {\r\n                  this.setFloor(i);\r\n               }\r\n            });\r\n         }\r\n\r\n         //--------\r\n         this.instance = panzoom(this.svgContainer, {\r\n            maxZoom: 2.5,\r\n            minZoom: 1,\r\n            zoomDoubleClickSpeed: 1,\r\n            bounds: true,\r\n            boundsPadding: 0.2,\r\n            zoomSpeed: 0.07,\r\n            onDoubleClick: () => {\r\n               this.resetZoom();\r\n            }\r\n         });\r\n         //--------\r\n         console.log('двойной клик для сброса карты');\r\n         this.formSearchResultList(this.searchParams);\r\n      })\r\n      .catch(e => {\r\n         console.log('Error: ' + e.message);\r\n      });\r\n   }\r\n\r\n   // Функция, которая отвечает за реакцию комнаты на выбор этой комнаты (нажатие или поиск). \r\n   //Проверяем, что искомая комната есть, если есть, то проверка, что это она уже не включена,  \r\n   // заполняем блок описания данными из json, смещаем блок описания\r\n   async selectRoom(roomID, flagOfUrl) {\r\n      let roomElement = document.querySelector('#' + roomID);\r\n      if (!roomElement) {\r\n         for (const floor of this.mapData.floors) {\r\n            for (const location of floor.locations) {\r\n               if (location.id.includes(roomID)) {\r\n                  await this.setFloor(this.mapData.floors.indexOf(floor));\r\n               }\r\n            }\r\n         }\r\n         roomElement = document.querySelector('#' + roomID);\r\n      };\r\n\r\n      const activeRoom = document.querySelector('[id^=\"room\"].active');   \r\n      const currentFLoorRooms =  this.mapData.floors[this.currentFloor].locations;\r\n\r\n      if (activeRoom && activeRoom !== roomElement) {\r\n         this.removeSelectRoom(activeRoom);\r\n      }\r\n\r\n      roomElement.classList.add('active');\r\n      this.zoomRoom(roomElement);\r\n\r\n      if (!flagOfUrl) {\r\n         this.updateUrl(roomID);\r\n      }\r\n\r\n      currentFLoorRooms.forEach(room => {\r\n         if (room.id === roomID) {\r\n            this.showDescriptionBlock(roomElement, room.title, room.about);\r\n         }\r\n      });\r\n   };\r\n\r\n   showDescriptionBlock(currentRoom, title, about) {\r\n      this.show(this.descriptionBlock);\r\n   \r\n      this.descriptionBlock.innerHTML =\r\n         `<h4>${title}</h4>\r\n         <p>${about}</p>`;\r\n   \r\n      // функция для считывания размера элемента и перемещения окна, но пока работает КРИВО\r\n      const roomRect = currentRoom.getBoundingClientRect();\r\n   \r\n      this.descriptionBlock.style.left = `${roomRect.left - this.descriptionBlock.offsetWidth / 2 + roomRect.width / 2}px`;\r\n      this.descriptionBlock.style.top = `${roomRect.top + window.scrollY - this.descriptionBlock.offsetHeight - 20}px`;\r\n   }\r\n\r\n   //Функция зумирования на комнату, вычисляет смещение свг, так чтобы комната оказалась в центре контейнера, учитывая уже сделанное смещение, плюс производит увеличение в центр этого контейнера\r\n   zoomRoom(currentRoom) {\r\n      const roomRect = currentRoom.getBoundingClientRect();\r\n      const containerRect = this.mapContainer.getBoundingClientRect();\r\n\r\n      const containerCenterX = containerRect.left + (containerRect.right - containerRect.left) / 2;\r\n      const containerCenterY = containerRect.top + (containerRect.bottom - containerRect.top) / 2 + window.scrollY;\r\n      const roomCenterX = roomRect.left + (roomRect.right - roomRect.left) / 2;\r\n      const roomCenterY = roomRect.top + (roomRect.bottom - roomRect.top) / 2 + window.scrollY;\r\n      const currentTransform = this.instance.getTransform();\r\n   \r\n      const moveToX = containerCenterX - roomCenterX;\r\n      const moveToY = containerCenterY - roomCenterY;\r\n      \r\n      this.instance.moveTo(currentTransform.x + moveToX, currentTransform.y + moveToY);\r\n      this.instance.smoothZoom(containerRect.width / 2, containerRect.height / 2, 2.5);\r\n   }\r\n\r\n   removeSelectRoom(activeRoom) {\r\n      activeRoom.classList.remove('active');\r\n      this.hide(this.descriptionBlock);\r\n   }\r\n   \r\n   resetZoom() {\r\n      this.instance.zoomTo(0, 0, 0.4);\r\n      this.instance.moveTo(0, 0);\r\n   }\r\n\r\n   async setFloor(floor) {\r\n      let floorsList = this.mapData.floors;\r\n      \r\n      if (floor < 0 || floor >= floorsList.length) {\r\n         console.log('такого этажа нет');\r\n      } else {\r\n         try {\r\n            let response = await fetch(floorsList[floor].map);\r\n   \r\n            if (!response.ok) {\r\n               let error = new Error(response.statusText);\r\n               error.response = response;\r\n               throw error;\r\n            }\r\n   \r\n            let svg = await response.text();\r\n            this.svgContainer.innerHTML = svg;\r\n   \r\n         } catch(e) {\r\n            console.log('Error: ' + e.message);\r\n         }\r\n         \r\n         this.currentFloor = floor;\r\n         this.currentFloorNumber.textContent = floorsList[floor].title;\r\n   \r\n         this.hide(this.descriptionBlock);\r\n         this.enable(this.floorReduceBtn);\r\n         this.enable(this.floorIncreaseBtn);\r\n   \r\n         if (floor === 0) {\r\n            this.disable(this.floorReduceBtn);\r\n         } else if (floor === floorsList.length - 1) {\r\n            this.disable(this.floorIncreaseBtn);\r\n         }\r\n      }\r\n   }\r\n\r\n   formSearchResultList(parameters) {\r\n      const textInput = this.searchInput.value.toLowerCase();\r\n      let SearchResultList;\r\n   \r\n      if (this.choosenCategory) {\r\n         if (textInput === \"\") {\r\n            SearchResultList = this.categoriesAndRoomsList.filter(item => {\r\n               if (item.room && item.room.category) {\r\n                  return item.room.category === this.choosenCategory;\r\n               }\r\n            });\r\n         } else {\r\n            SearchResultList = this.categoriesAndRoomsList.filter(item => {\r\n               if (item.room && item.room.category && item.room.category === this.choosenCategory) {\r\n                  for (let i = 0; i < parameters.length; ++i) {\r\n                     if (item.room[parameters[i]] && item.room[parameters[i]].toLowerCase().includes(textInput)) {\r\n                        return true;\r\n                     }\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      } else {\r\n         if (textInput === \"\") {\r\n            SearchResultList = this.mapData.categories.map(item => {\r\n               return {category: item};\r\n            });\r\n         }\r\n         else {\r\n            SearchResultList = this.categoriesAndRoomsList.filter(item => {\r\n               if(item.category) {\r\n                  for (let i = 0; i < parameters.length; ++i) {\r\n                     if (item.category[parameters[i]] && item.category[parameters[i]].toLowerCase().includes(textInput)) {\r\n                        return true;\r\n                     }\r\n                  }\r\n                  return false;\r\n               } else {\r\n                  for (let i = 0; i < parameters.length; ++i) {\r\n                     if (item.room[parameters[i]] && item.room[parameters[i]].toLowerCase().includes(textInput)) {\r\n                        return true;\r\n                     }\r\n                  }\r\n                  return false;\r\n               }\r\n            });\r\n         }\r\n      }\r\n   \r\n      this.showSearchResult(SearchResultList);\r\n   }\r\n\r\n   showSearchResult(searchResult) {\r\n      this.searchResultBlock.innerHTML = '';\r\n   \r\n      searchResult.forEach(element => {\r\n         const variant = document.createElement('button');\r\n         variant.classList.add('searchResultBlock_item');\r\n   \r\n         if (element.category) {\r\n            variant.dataset.categoryId = element.category.id;\r\n            variant.dataset.title = element.category.title;\r\n            variant.dataset.about = element.category.about;\r\n            variant.innerHTML =\r\n               `<h5>${element.category.id}</h5>\r\n               <p>${element.category.title}</p>`;\r\n         } else {\r\n            variant.dataset.floor = element.floor;\r\n            variant.dataset.room = element.room.id;\r\n            variant.innerHTML =\r\n               `<h5>${element.room.id}</h5>\r\n               <p>${element.room.title}</p>`;\r\n         }\r\n   \r\n         this.searchResultBlock.appendChild(variant);\r\n      });\r\n   }\r\n\r\n   // функция поиска комнаты после клика по кнопке комнаты в списке. Если комната на текущем этаже, то сразу ищем, если нет, то надо отрисовать нужный этаж и найти там\r\n   searchResultsClickHandler(event) {\r\n      if (event.target.tagName === 'BUTTON') {\r\n         if(event.target.dataset.categoryId) {\r\n            this.choosenCategory = event.target.dataset.categoryId;\r\n            this.searchInput.value = \"\";\r\n            this.show(this.choosenCategoryBlock);\r\n            this.formSearchResultList(this.searchParams);\r\n\r\n            this.choosenCategoryTextBlock.innerHTML =\r\n                  `<h5>${event.target.dataset.title}</h5>\r\n                  <p>${event.target.dataset.about}</p>`;\r\n         } else {\r\n            this.selectRoom(event.target.dataset.room);\r\n         }\r\n      }\r\n   }\r\n\r\n   checkURL() {\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      const roomIdFromUrl = urlParams.get('location');\r\n      let result;\r\n      if (roomIdFromUrl) {\r\n         this.categoriesAndRoomsList.forEach(element => {\r\n            if (element.room) {\r\n               if (element.room.id === roomIdFromUrl) {\r\n                  result = roomIdFromUrl;\r\n               }\r\n            }\r\n         });\r\n   \r\n         if (!result) {\r\n            console.log('Такой комнаты нет');\r\n         }\r\n      } \r\n      \r\n      return result;\r\n   }\r\n\r\n   // Функции для обновления и сброса URL при поиске комнат\r\n   updateUrl(roomId) {\r\n      const newUrl = this.baseUrl + '?location=' + roomId;\r\n      history.replaceState( { roomId } , '', newUrl);\r\n   }\r\n   resetUrl() {\r\n      history.replaceState( { roomId: null } , '', this.baseUrl);\r\n   }\r\n\r\n   // функции скрытия и показывания элемента\r\n   disable(element) {\r\n      element.disabled = true;\r\n   }\r\n   enable(element) {\r\n      element.disabled = false;\r\n   }\r\n\r\n   hide(element) {\r\n      element.classList.add('hidden');\r\n   }\r\n   show(element) {\r\n      element.classList.remove('hidden');\r\n   }\r\n\r\n   //Функция для создания задержки вызова другой функции\r\n   debounce(func, ms) {\r\n      let timeout;\r\n\r\n      return function() {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func.apply(this, arguments), ms);\r\n      };\r\n   }\r\n\r\n   injectStyle() {\r\n      const style = document.createElement('style');\r\n      style.innerHTML = `\r\n         /*стили для контейнера с самой картой*/\r\n         .interactiveBlock {\r\n            position: absolute;\r\n            width: 1000px;\r\n            height: 500px;\r\n            border: 3px solid black;\r\n            left: 25%;\r\n         }\r\n\r\n         .mapContainer {\r\n            width: 100%;\r\n            height: 100%;\r\n            position: relative;\r\n            overflow: hidden;\r\n            margin: auto;\r\n         }\r\n\r\n         .svgConteiner {\r\n            width: 100%;\r\n            height: 100%;\r\n            max-height: 500px;\r\n            display: flex;\r\n            justify-content: center;\r\n            transition: 0.1s;\r\n            overflow: hidden;\r\n            border: 2px solid red;\r\n            box-sizing: border-box;\r\n         }\r\n\r\n         /*стили для блока с информацией*/\r\n         .descriptionBlock {\r\n            background-color: #fff;\r\n            box-shadow: 0 0 20px rgba(0,0,0,0.15);\r\n            pointer-events: auto;\r\n            padding: 16px;\r\n            width: 300px;\r\n            height: 100px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: flex-start;\r\n            justify-content: flex-start;\r\n            position: absolute;\r\n         }\r\n         .descriptionBlock.hidden{\r\n            display: none !important;\r\n         }\r\n         .descriptionBlock h4 {\r\n            font-family: Roboto, Tahoma, Helvetica, sans-serif;\r\n            font-size: 16px;\r\n            margin: 0;\r\n            color: #333;\r\n            font-weight: bold;\r\n            margin-bottom: 15px;\r\n         }\r\n         .descriptionBlock p {\r\n            font-family: Roboto, Tahoma, Helvetica, sans-serif;\r\n            font-size: 13px;\r\n            margin: 0;\r\n            color: #333;\r\n         }\r\n\r\n         .searchingBlock {\r\n            position: absolute;\r\n            width: 450px;\r\n            height: 500px;\r\n            border: 3px solid black;\r\n            left: 10px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: start;\r\n         }\r\n\r\n         .searchInput {\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            width: 100%;\r\n            height: 30px;\r\n         }\r\n\r\n         /*стили для блока с категориями и элементов списка*/\r\n         .categoriesBlock {\r\n            height: auto;\r\n            width: 100%;\r\n            min-height: 50px;\r\n            background-color: orange;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            box-sizing: border-box;\r\n         }\r\n\r\n         .choosenCategoryBlock{\r\n            height: 40px;\r\n            width: 250px;\r\n            background-color: #fff;\r\n            border-radius: 20px;\r\n            border: 2px solid black;\r\n            box-sizing: border-box;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n         }\r\n         \r\n         .choosenCategoryBlock.hidden {\r\n            display: none;\r\n         }\r\n         \r\n         .choosenCategoryTextBlock {\r\n            width: auto;\r\n            height: 100%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n         }\r\n         .choosenCategoryTextBlock p {\r\n            margin: 0;\r\n            width: auto;\r\n            font-size: 11px;\r\n         }\r\n         .choosenCategoryTextBlock h5 {\r\n            margin: 0 10px 0 10px;\r\n         }\r\n         \r\n         .closeChoosenCategoryButton {\r\n            width: 20px;\r\n            height: 20px;\r\n            margin: 0px 5px;\r\n            border-radius: 5px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n         }\r\n\r\n         /*стили блока с подсказками для поиска*/\r\n         .searchResultBlock {\r\n            width: 100%;\r\n            height: 420px;\r\n            background-color: yellow;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: flex-start;\r\n            justify-content: start;\r\n            overflow-y: auto;\r\n         }\r\n\r\n         .searchResultBlock_item {\r\n            width: 100%;\r\n            min-height: 50px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n            padding: 0 10px;\r\n            box-sizing: border-box;\r\n            color: black;\r\n            border: 3px solid green;\r\n            background-color: lightblue;\r\n            cursor: pointer;\r\n         }\r\n\r\n         .floorSwitchingBar {\r\n            position: absolute;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-around;\r\n            width: 150px;\r\n            height: 40px;\r\n            background-color: yellow;\r\n            bottom: 0px;\r\n            right: 0px;\r\n            z-index: 10;\r\n         }\r\n\r\n         /*стили для кнопок + и -, включенных и отключенных*/\r\n         .floorIncreaseBtn, .floorReduceBtn {\r\n            cursor: pointer;\r\n            width: 30px;\r\n            height: 30px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-size: 20px;\r\n            padding: 0;\r\n         }\r\n\r\n         .currentFloorNumber {\r\n            width: 80px;\r\n            height: 30px;\r\n            font-size: 12px;\r\n            background-color: white;\r\n            border: 1px solid black;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n         }\r\n\r\n         /*стили для комнат при наведении*/\r\n         [id^=\"room-\"]:hover polygon {\r\n            filter: brightness(1.15);\r\n            cursor: pointer;\r\n         }\r\n\r\n         /*отключаем курсор на тексте комнат*/\r\n         [id^=\"Текст\"] * {\r\n            pointer-events: none;\r\n         }\r\n\r\n         /*стили для нажатых комнат*/\r\n         .active polygon{\r\n            filter: brightness(0.8) hue-rotate(90deg) !important;\r\n         }\r\n      `;\r\n      document.querySelector('head').appendChild(style);\r\n   }\r\n}\n\n//# sourceURL=webpack://gulp-builder-for-the-webproject/./src/js/modules/interactivemap.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;